import serial

import cv2

import numpy as np

from p3 import *

import time



ser = serial.Serial('/dev/ttyACM0', 115200, timeout = 1)

ser.write("240,130")

time.sleep(.2)

cap = cv2.VideoCapture(0)

cap.set(3, 320)	#pervious value was 320

cap.set(4, 240)	#previous value was 240

low_range = np.array([10, 120, 100])

high_range = np.array([70, 255, 255])


lastX = 0

lastY = 0

deltaX = 0

deltaY = 0


while (cap.isOpened()):

	ret, frame = cap.read()

	hue_image = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

	threshold_img = cv2.inRange(hue_image, low_range, high_range)

	contour, hierarchy = cv2.findContours(threshold_img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

	if contour:

		center = contour[0]

		moment = cv2.moments(center)

		(x,y),radius = cv2.minEnclosingCircle(center)

		#y = 120 - y

		#print ("C1", center)

		#time.sleep(1)

		#print ("c2", center)

		#time.sleep(1)

		deltaX = x - lastX

		deltaY = y - lastY

		lastX = int(x)

		lastY = int(y)

		#math = lastY * (4.0/3.0)

		#print ("deltaY", deltaY)

		#print ("deltaX", deltaX)

		#time.sleep(.5)

		radius = int(radius)

		img = cv2.circle(frame, (lastX, lastY), radius, (0, 255, 0), 2)

		#img = cv2.circle(frame, (lastX, 120 - lastY), radius, (0, 255, 0), 2)

	cv2.imshow('video', frame)

	if deltaY < 1:

		newPaddleX, newPaddleY = calcPaddlePosition3(lastY, lastX, -deltaY, deltaX) # switched x and y because of the placement of the camera

		#print ("padx", newPaddleX)

		#print ("pady", newPaddleY)

		#time.sleep(1)

		xCommand = str(newPaddleX)

		yCommand = str(newPaddleY)

		command = xCommand.zfill(3) + ',' + yCommand.zfill(3)

		#print ("com&", command)

		ser.write(command)

		time.sleep(.1)

	if cv2.waitKey(10) == 27:

		break



cap.release
cv2.destroyAllWindows()